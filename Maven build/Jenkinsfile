pipeline {

    agent any

    environment {
        DOCKER_TAG = getDockerTag()
        NEXUS_URL  = '172.32.5.240:5050'
        IMAGE_URL_WITH_TAG = "${NEXUS_URL}/credit-pro-user-management:${DOCKER_TAG}"
    }

    stages {

        stage('Maven Package') {
            steps {
                withMaven(maven: 'MAVEN_HOME') {
                    sh 'mvn package -Dmaven.test.skip'
                }
            }
        }
        stage('Building Docker Image') {
            steps {
                sh "docker build . -t ${IMAGE_URL_WITH_TAG}"
            }
        }
        stage('Push to In-house Nexus Docker Registry') {
            steps {
                withCredentials([string(credentialsId: 'nexus-pwd', variable: 'nexusPwd')]) {
                    sh 'docker login -u admin -p ${nexusPwd} ${NEXUS_URL}'
                    sh "docker push ${IMAGE_URL_WITH_TAG}"
                }
            }
        }
        stage('Sending Deployment Artifacts to credit-pro-linux') {
            steps {
                sh 'chmod +x changeTag.sh'
                sh "./changeTag.sh ${DOCKER_TAG}"

                sshPublisher(publishers: [sshPublisherDesc(configName: 'credit-pro-linux', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '/pipelines/credit-pro-user-management/', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '*.yml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])                
            }
        }

        stage('Deployment of service in credit-pro-linux') {
            steps {
               sshPublisher(publishers: [sshPublisherDesc(configName: 'credit-pro-linux', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'docker-compose -f /home/chtemba/pipelines/credit-pro-user-management/docker-compose.yml up -d', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
            }
        }
    }
}

def getDockerTag() {
    def tag  = sh script: 'git rev-parse HEAD', returnStdout: true
    return tag
}